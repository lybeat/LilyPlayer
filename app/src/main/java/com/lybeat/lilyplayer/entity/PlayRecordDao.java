package com.lybeat.lilyplayer.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_RECORD".
*/
public class PlayRecordDao extends AbstractDao<PlayRecord, Long> {

    public static final String TABLENAME = "PLAY_RECORD";

    /**
     * Properties of entity PlayRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Progress = new Property(3, long.class, "progress", false, "PROGRESS");
        public final static Property Duration = new Property(4, long.class, "duration", false, "DURATION");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
    };


    public PlayRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PlayRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PATH\" TEXT," + // 1: path
                "\"NAME\" TEXT," + // 2: name
                "\"PROGRESS\" INTEGER NOT NULL ," + // 3: progress
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"TIME\" INTEGER NOT NULL );"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getProgress());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getProgress());
        stmt.bindLong(5, entity.getDuration());
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PlayRecord readEntity(Cursor cursor, int offset) {
        PlayRecord entity = new PlayRecord( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // progress
            cursor.getLong(offset + 4), // duration
            cursor.getLong(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayRecord entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProgress(cursor.getLong(offset + 3));
        entity.setDuration(cursor.getLong(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlayRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlayRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
